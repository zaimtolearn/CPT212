public class BMHAlgorithm {
    static int NO_OF_CHARS = 256;

    // Preprocessing the bad character heuristic
    static void badCharHeuristic(char[] str, int size, int[] badchar) {
        for (int i = 0; i < NO_OF_CHARS; i++)
            badchar[i] = size; // Default shift is the pattern length

        for (int i = 0; i < size - 1; i++)
            badchar[str[i]] = size - 1 - i; // Calculate the shift for each character
    }

    // A pattern searching function that uses the Bad Character Heuristic
    static void search(char[] txt, char[] pat) {
        int m = pat.length;
        int n = txt.length;

        int[] badchar = new int[NO_OF_CHARS];

        // Fill the bad character array by calling the preprocessing function
        badCharHeuristic(pat, m, badchar);

        int s = 0; // s is the shift of the pattern with respect to the text
        while (s <= (n - m)) {
            int j = m - 1;

            // Keep reducing index j of pattern while characters of pattern and text are matching at this shift s
            while (j >= 0 && pat[j] == txt[s + j])
                j--;

            // If the pattern is present at current shift, then index j will become -1 after the above loop
            if (j < 0) {
                System.out.println("Pattern occurs at shift = " + s);

                // Shift the pattern so that the next character in text aligns with the last occurrence of it in pattern.
                s += (s + m < n) ? m : 1;
            } else {
                // Shift the pattern so that the bad character in text aligns with the last occurrence of it in pattern.
                s += badchar[txt[s + m - 1]];
            }
        }
    }

    // Driver program to test the above function
    public static void main(String[] args) {
        char[] txt = "UNIVERSITI SAINS MALAYSIA".toCharArray();
        char[] pat = "SAINS".toCharArray();
        search(txt, pat);
    }
}
