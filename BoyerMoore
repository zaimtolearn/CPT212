class BoyerMoore {

    static int NO_OF_CHARS = 256;

    // A utility function to get the maximum of two integers
    static int max(int a, int b) { return (a > b) ? a : b; }

    // The preprocessing function for Boyer Moore's bad character heuristic
    static void badCharHeuristic(char[] str, int size, int[] badchar) {
        // Initialize all occurrences as -1
        for (int i = 0; i < NO_OF_CHARS; i++)
            badchar[i] = -1;

        // Fill the actual value of the last occurrence of a character (indices of the table are ASCII and 
        // values are the index of the occurrence)
        for (int i = 0; i < size; i++)
            badchar[str[i]] = i;
    }

    // Preprocessing for the strong good suffix rule
    static void preprocessStrongSuffix(int[] shift, int[] bpos, char[] pat, int m) {
        int i = m, j = m + 1;
        bpos[i] = j;

        while (i > 0) {
            while (j <= m && pat[i - 1] != pat[j - 1]) {
                if (shift[j] == 0)
                    shift[j] = j - i;
                j = bpos[j];
            }
            i--; j--;
            bpos[i] = j;
        }
    }

    // Preprocessing for case 2 of the good suffix heuristic
    static void preprocessCase2(int[] shift, int[] bpos, char[] pat, int m) {
        int i, j = bpos[0];
        for (i = 0; i <= m; i++) {
            if (shift[i] == 0)
                shift[i] = j;
            if (i == j)
                j = bpos[j];
        }
    }

    // The search function that uses both the Bad Character and Good Suffix heuristics
    static void search(char[] txt, char[] pat) {
        int m = pat.length;
        int n = txt.length;

        int[] badchar = new int[NO_OF_CHARS];
        int[] bpos = new int[m + 1];
        int[] shift = new int[m + 1];

        // Initialize all occurrences of shift to 0
        for (int i = 0; i < m + 1; i++)
            shift[i] = 0;

        // Preprocessing for both heuristics
        badCharHeuristic(pat, m, badchar);
        preprocessStrongSuffix(shift, bpos, pat, m);
        preprocessCase2(shift, bpos, pat, m);

        int s = 0; // s is the shift of the pattern with respect to the text
        while (s <= (n - m)) {
            int j = m - 1;

            // Keep reducing index j of the pattern while characters of the pattern and text are matching at this shift s
            while (j >= 0 && pat[j] == txt[s + j])
                j--;

            // If the pattern is present at the current shift, then index j will become -1 after the above loop
            if (j < 0) {
                System.out.println("Pattern occurs at shift = " + s);
                s += shift[0];
            } else {
                // Use the maximum shift given by the bad character heuristic and the good suffix heuristic
                s += max(shift[j + 1], j - badchar[txt[s + j]]);
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        char[] txt = "ABAAAABAACD".toCharArray();
        char[] pat = "ABA".toCharArray();
        BoyerMoore.search(txt, pat);
    }
}
